# -*- coding: utf-8 -*-
"""Crawler_gold.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nl4_lgGitPc2SnqMFvRU0G3gNyoGxeYa
"""

import requests
import pandas as pd
import numpy as np
from bs4 import BeautifulSoup
from datetime import datetime


class Gold_Crawler():
    def __init__(self) :
        self.__url = 'https://finance.yahoo.com/quote/GC%3DF/history/?period1=967608000&period2=1720686498'
        self.__headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'}

    def crawl(self) :
        resp = requests.get(self.__url, headers=self.__headers)
        soup = BeautifulSoup(resp.content, 'lxml')

        date_tags = soup.select('td.svelte-ewueuo')[::7]
        open_tags = soup.select('td.svelte-ewueuo')[1::7]
        high_tags = soup.select('td.svelte-ewueuo')[2::7]
        low_tags = soup.select('td.svelte-ewueuo')[3::7]
        close_tags = soup.select('td.svelte-ewueuo')[4::7]
        adj_tags = soup.select('td.svelte-ewueuo')[5::7]
        vol_tags = soup.select('td.svelte-ewueuo')[6::7]

        dates, opens, highs,lows, closes, adjs, vols = [], [], [], [], [], [], []
        for date_tag, open_tag, high_tag, low_tag, close_tag, adj_tag, vol_tag in zip(date_tags, open_tags, high_tags, low_tags, close_tags, adj_tags, vol_tags):
            dates.append(date_tag.text)
            opens.append(open_tag.text)
            highs.append(high_tag.text)
            lows.append(low_tag.text)
            closes.append(close_tag.text)
            adjs.append(adj_tag.text)
            vols.append(vol_tag.text)

        data = pd.DataFrame({'date':dates,'Open':opens,'High':highs,'Low':lows,'Close':closes,'Adj Close':adjs,'Volume':vols})
        data.replace('-', np.nan, inplace=True)
        data['date'] = pd.to_datetime(data.date, format='%b %d, %Y')
        columns_to_convert = ['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']
        for column in columns_to_convert:
            data[column] = data[column].str.replace(',', '').astype('float')
        data.to_csv('gold_data.csv', index=False)

        return data

